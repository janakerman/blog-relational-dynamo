AWSTemplateFormatVersion: "2010-09-09"
Resources: 
  IngestDataBucket:
    Type: AWS::S3::Bucket

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - s3:GetObject  
            - dynamodb:*
            Resource: 
            - "*"

  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: !Sub |
          const AWS = require('aws-sdk')
          const s3 = new AWS.S3()
          const https = require("https")
          const url = require("url")
          AWS.config.region = 'eu-west-2'

          exports.handler = function (event, context) {
            console.log(event)
            console.log(context)
            if (event.RequestType !== 'Create') {
              sendResponse(event, context, 'SUCCESS', { data: 'data' })
            }


            try {
              const bucket = process.env.INGEST_DATA_BUCKET.split(':::')[1]
              const targetTable = event.ResourceProperties.TargetTable
              const ingestFile = event.ResourceProperties.DataIngestFile

              writeDynamoData(bucket, ingestFile, targetTable)
              sendResponse(event, context, 'SUCCESS', { data: 'data' })
            } catch(e) {
              console.log('Failed to write data', e)
              sendResponse(event, context, 'FAILED', { data: 'data' })
            } finally {
              console.log('done I am')
            }            
          }

          async function writeDynamoData(bucket, ingestFile, targetTable) {
            const params = { Bucket: bucket, Key: ingestFile }
            const response = await s3.getObject(params).promise()
            const ingestData = JSON.parse(response.Body)

            console.log("Ingesting data into ''" + targetTable + "':")
            console.log(JSON.stringify(ingestData, null, 2))

            const documentClient = new AWS.DynamoDB.DocumentClient();
            try {
              await Promise.all(ingestData.map(element => {
                return documentClient.put({
                  TableName: targetTable,
                  Item: {
                    ...element
                  }
                }).promise()
              }))
              console.log('Data ingested...')
            } catch (e) {
              console.log('Error ingesting data:')
              console.log(e)
            }
          }

          async function sendResponse(event, context, responseStatus, responseData) {
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              })

              console.log("RESPONSE BODY:\n", responseBody)

              var parsedUrl = url.parse(event.ResponseURL)
              var options = {
                hostname: parsedUrl.hostname,
                port: 443,
                path: parsedUrl.path,
                method: "PUT",
                headers: {
                  "content-type": "",
                  "content-length": responseBody.length
                }
              }

              console.log("SENDING RESPONSE...\n");
              await makeRequest(options, responseBody)
            }

            function makeRequest(options, body) {
              return new Promise((resolve, reject) => {
                const request = https.request(options, response => {
                  console.log("STATUS: " + response.statusCode)
                  console.log("HEADERS: " + JSON.stringify(response.headers))
                  resolve()
                })

                request.on("error", error => {
                  console.log("sendResponse Error:" + error)
                  reject()
                })

                request.write(body)
                request.end()
              })
            }
      Description: Lambda function that ingests data into a DynamoDB table.
      FunctionName: !Join
        - '-'
        - - !Ref AWS::StackName
          - DataIngestLambda
      Handler: index.handler
      Role : !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 5
      Environment:
        Variables:
          INGEST_DATA_BUCKET: !GetAtt IngestDataBucket.Arn

Outputs:
  IngestFunctionArn:
    Description: ARN of data ingest function.
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ingest-lambda"